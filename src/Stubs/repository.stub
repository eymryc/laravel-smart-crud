<?php

namespace {{ repositoryNamespace }};

use {{ modelNamespace }};
use {{ repositoryInterfaceNamespace }};
use {{ filterDtoNamespace }};
use VotreNom\SmartCrud\Traits\BaseRepositoryTrait;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Pagination\LengthAwarePaginator;

class {{ repositoryClass }} implements {{ repositoryInterfaceClass }}
{
    use BaseRepositoryTrait;

    public function __construct(private {{ modelClass }} $model) {}

    public function getAll({{ filterDtoClass }} $filters): LengthAwarePaginator
    {
        $query = $this->buildQuery($filters);
        return $query->paginate($filters->perPage ?? config('smart-crud.defaults.pagination.per_page'));
    }

    public function findById(int $id): ?{{ modelClass }}
    {
        return $this->model->find($id);
    }

    public function create(array $data): {{ modelClass }}
    {
        return $this->model->create($data);
    }

    public function update({{ modelClass }} $model, array $data): {{ modelClass }}
    {
        $model->update($data);
        return $model->fresh();
    }

    public function delete({{ modelClass }} $model): bool
    {
        return $model->delete();
    }

    private function buildQuery({{ filterDtoClass }} $filters): Builder
    {
        $query = $this->model->newQuery();

        // Search functionality
        if ($filters->search) {
            $searchFields = config('smart-crud.database.searchable_columns');
            $query->where(function ($q) use ($filters, $searchFields) {
{{ searchFields }}
            });
        }

        // Sorting
        if ($filters->sortBy && in_array($filters->sortBy, [{{ sortableFields }}])) {
            $direction = $filters->sortDirection ?? config('smart-crud.defaults.sorting.default_direction');
            $query->orderBy($filters->sortBy, $direction);
        } else {
            $query->latest();
        }

        return $query;
    }
}