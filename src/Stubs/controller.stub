<?php

namespace {{ controllerNamespace }};

use {{ modelNamespace }};
use App\Http\Controllers\Controller;
use {{ serviceNamespace }};
use {{ storeRequestNamespace }};
use {{ updateRequestNamespace }};
use {{ resourceNamespace }};
use {{ collectionNamespace }};
use {{ createDtoNamespace }};
use {{ updateDtoNamespace }};
use {{ filterDtoNamespace }};
use VotreNom\SmartCrud\Traits\ApiResponseTrait;
use {{ exceptionNamespace }};
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;

class {{ controllerClass }} extends Controller
{
    use ApiResponseTrait;

    public function __construct(
        private {{ serviceClass }} ${{ serviceVariable }}
    ) {}

    public function index(Request $request): JsonResponse
    {
        try {
            $filters = {{ filterDtoClass }}::fromRequest($request->all());
            ${{ resourceVariable }} = $this->{{ serviceVariable }}->getAll($filters);
            
            return $this->successResponse(
                new {{ collectionClass }}(${{ resourceVariable }}),
                config('smart-crud.api.messages.listed')
            );
        } catch (\Exception $e) {
            return $this->errorResponse('Failed to retrieve {{ resourceVariable }}', 500);
        }
    }

    public function store({{ storeRequestClass }} $request): JsonResponse
    {
        try {
            $dto = {{ createDtoClass }}::fromRequest($request->validated());
            ${{ modelVariable }} = $this->{{ serviceVariable }}->create($dto);
            
            return $this->successResponse(
                new {{ resourceClass }}(${{ modelVariable }}),
                config('smart-crud.api.messages.created'),
                201
            );
        } catch (\Exception $e) {
            return $this->errorResponse('Failed to create {{ modelVariable }}', 500);
        }
    }

    public function show(int $id): JsonResponse
    {
        try {
            ${{ modelVariable }} = $this->{{ serviceVariable }}->findById($id);
            
            return $this->successResponse(
                new {{ resourceClass }}(${{ modelVariable }}),
                config('smart-crud.api.messages.retrieved')
            );
        } catch ({{ exceptionClass }} $e) {
            return $this->errorResponse($e->getMessage(), 404);
        } catch (\Exception $e) {
            return $this->errorResponse('Failed to retrieve {{ modelVariable }}', 500);
        }
    }

    public function update({{ updateRequestClass }} $request, int $id): JsonResponse
    {
        try {
            $dto = {{ updateDtoClass }}::fromRequest($request->validated());
            ${{ modelVariable }} = $this->{{ serviceVariable }}->update($id, $dto);
            
            return $this->successResponse(
                new {{ resourceClass }}(${{ modelVariable }}),
                config('smart-crud.api.messages.updated')
            );
        } catch ({{ exceptionClass }} $e) {
            return $this->errorResponse($e->getMessage(), 404);
        } catch (\Exception $e) {
            return $this->errorResponse('Failed to update {{ modelVariable }}', 500);
        }
    }

    public function destroy(int $id): JsonResponse
    {
        try {
            $this->{{ serviceVariable }}->delete($id);
            
            return $this->successResponse(
                null,
                config('smart-crud.api.messages.deleted')
            );
        } catch ({{ exceptionClass }} $e) {
            return $this->errorResponse($e->getMessage(), 404);
        } catch (\Exception $e) {
            return $this->errorResponse('Failed to delete {{ modelVariable }}', 500);
        }
    }
}