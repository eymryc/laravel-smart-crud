<?php

namespace {{ serviceNamespace }};

use {{ modelNamespace }};
use {{ repositoryInterfaceNamespace }};
use {{ createDtoNamespace }};
use {{ updateDtoNamespace }};
use {{ filterDtoNamespace }};
use {{ exceptionNamespace }};
use Illuminate\Pagination\LengthAwarePaginator;

class {{ serviceClass }}
{
    public function __construct(
        private {{ repositoryInterfaceClass }} ${{ repositoryVariable }}
    ) {}

    public function getAll({{ filterDtoClass }} $filters): LengthAwarePaginator
    {
        return $this->{{ repositoryVariable }}->getAll($filters);
    }

    public function findById(int $id): {{ modelClass }}
    {
        ${{ modelVariable }} = $this->{{ repositoryVariable }}->findById($id);
        
        if (!${{ modelVariable }}) {
            throw new {{ exceptionClass }}("No {{ modelVariable }} found with ID: {$id}");
        }
        
        return ${{ modelVariable }};
    }

    public function create({{ createDtoClass }} $dto): {{ modelClass }}
    {
        return $this->{{ repositoryVariable }}->create($dto->toArray());
    }

    public function update(int $id, {{ updateDtoClass }} $dto): {{ modelClass }}
    {
        ${{ modelVariable }} = $this->findById($id);
        return $this->{{ repositoryVariable }}->update(${{ modelVariable }}, $dto->toArray());
    }

    public function delete(int $id): bool
    {
        ${{ modelVariable }} = $this->findById($id);
        return $this->{{ repositoryVariable }}->delete(${{ modelVariable }});
    }
}