<?php

namespace {{ namespace }};

use App\Models\{{ model }};
use {{ interfaceNamespace }}\{{ interface }};
use Rouangni\SmartCrud\Traits\BaseRepositoryTrait;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Pagination\LengthAwarePaginator;

class {{ class }} implements {{ interface }}
{
    use BaseRepositoryTrait;

    protected {{ model }} $model;

    public function __construct({{ model }} $model)
    {
        $this->model = $model;
    }

    /**
     * Get all {{ modelPluralLower }} with optional filtering
     */
    public function all(array $filters = [], array $relations = []): Collection
    {
        $query = $this->model->newQuery();

        if (!empty($relations)) {
            $query->with($relations);
        }

        $this->applyFilters($query, $filters);
        $this->applySorting($query, $filters['sort_by'] ?? null, $filters['sort_direction'] ?? 'asc');

        return $query->get();
    }

    /**
     * Get paginated {{ modelPluralLower }}
     */
    public function paginate(int $perPage = 15, array $filters = [], array $relations = []): LengthAwarePaginator
    {
        $query = $this->model->newQuery();

        if (!empty($relations)) {
            $query->with($relations);
        }

        $this->applyFilters($query, $filters);
        $this->applySorting($query, $filters['sort_by'] ?? null, $filters['sort_direction'] ?? 'asc');

        return $query->paginate($perPage);
    }

    /**
     * Find {{ modelLower }} by ID
     */
    public function find(int $id, array $relations = []): ?{{ model }}
    {
        $query = $this->model->newQuery();

        if (!empty($relations)) {
            $query->with($relations);
        }

        return $query->find($id);
    }

    /**
     * Find {{ modelLower }} by ID or fail
     */
    public function findOrFail(int $id, array $relations = []): {{ model }}
    {
        $query = $this->model->newQuery();

        if (!empty($relations)) {
            $query->with($relations);
        }

        return $query->findOrFail($id);
    }

    /**
     * Create a new {{ modelLower }}
     */
    public function create(array $data): {{ model }}
    {
        return $this->model->create($data);
    }

    /**
     * Update existing {{ modelLower }}
     */
    public function update({{ model }} ${{ modelVariable }}, array $data): {{ model }}
    {
        ${{ modelVariable }}->update($data);
        return ${{ modelVariable }}->fresh();
    }

    /**
     * Delete {{ modelLower }}
     */
    public function delete({{ model }} ${{ modelVariable }}): bool
    {
        return ${{ modelVariable }}->delete();
    }

    /**
     * Get sortable fields for this repository
     */
    protected function getSortableFields(): array
    {
        return [
            'id',
            'created_at',
            'updated_at',
            // TODO: Add your sortable fields here
            // Example:
            // 'name',
            // 'email',
            // 'status',
        ];
    }
}